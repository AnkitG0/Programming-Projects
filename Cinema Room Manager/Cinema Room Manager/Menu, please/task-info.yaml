type: edu
custom_name: Menu, please!
files:
- name: src/cinema/Cinema.java
  visible: true
  text: "package cinema;\nimport java.util.*;\n\npublic class Cinema {\n\n\tpublic\
    \ static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\
    \n\t\t// Prompt for row and seats in theatre\n\t\tSystem.out.println(\"Enter the\
    \ number of rows:\");\n\t\tint totalRows = scanner.nextInt();\n\t\tSystem.out.println(\"\
    Enter the number of seats in each row:\");\n\t\tint seats = scanner.nextInt();\n\
    \n\t\t// Creating Cinema Array based on input\n\t\tchar[][] cinemaMap = new char[totalRows][seats];\n\
    \t\t// Filling the array with 'S'\n\t\tfor (int i = 0; i < totalRows; i++) {\n\
    \t\t\tArrays.fill(cinemaMap[i], 0, seats, 'S');\n\t\t}\n\n\t\t// Printing the\
    \ Cinema Map\n\t\tgenerateMap(cinemaMap);\n\n\t\t// Prompting for seat selection\n\
    \t\tSystem.out.println(\"Enter a row number:\");\n\t\tint rowSelection = scanner.nextInt();\n\
    \t\tSystem.out.println(\"Enter a seat number in that row:\");\n\t\tint seatSelection\
    \ = scanner.nextInt();\n\n\t\t// Displaying the ticket price\n\t\tint ticketPrice\
    \ = calculatePrice(rowSelection, seatSelection, totalRows, seats);\n\t\tSystem.out.println(\"\
    Ticket price: $\" + ticketPrice + \"\\n\");\n\n\t\t// Display seat selection\n\
    \t\tdisplaySelection(cinemaMap, rowSelection, seatSelection);\n\n\t}\n\n\tprivate\
    \ static void displaySelection(char[][] cinemaMap, int rowSelection, int seatSelection)\
    \ {\n\t\tcinemaMap[rowSelection - 1][seatSelection - 1] = 'B';\n\t\tgenerateMap(cinemaMap);\n\
    \n\t}\n\n\tprivate static int calculatePrice(int rowSelection, int seatSelection,\
    \ int totalRows, int seats) {\n\t\tint totalSeats = totalRows * seats;\n\n\t\t\
    if (totalSeats > 60 && rowSelection > (totalRows / 2)) {\n\t\t\treturn 8;\n\t\t\
    } else\n\t\t\treturn 10;\n\t}\n\n\t// Used to print cinema Map\n\tprivate static\
    \ void generateMap(char[][] cinemaMap) {\n\t\t// Displaying the Heading\n\t\t\
    System.out.println(\"Cinema:\");\n\t\t// Displaying the array\n\t\tSystem.out.print(\"\
    \  \");\n\t\tfor (int i = 0; i < cinemaMap[0].length; i++) {\n\t\t\tSystem.out.print(i\
    \ + 1 + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor (int row = 0; row <\
    \ cinemaMap.length; row++) {\n\t\t\tSystem.out.print(row + 1 + \" \");\n\t\t\t\
    for (int j = 0; j < cinemaMap[row].length; j++) {\n\t\t\t\tSystem.out.print(cinemaMap[row][j]\
    \ + \" \");\n\t\t\t}\n\t\t\tSystem.out.println(\"\");\n\n\t\t}\n\t\tSystem.out.println();\n\
    \t}\n}"
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class CinemaTests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test1_checkExit() {

            TestedProgram program = new TestedProgram();
            String output = program.start().strip();

            if (!output.toLowerCase().contains("enter the number of rows")) {
                return CheckResult.wrong("At the beginning your program should ask for entering the number of rows.\n" +
                    "Your output should contain 'Enter the number of rows:'.");
            }

            output = program.execute("7");

            if (!output.toLowerCase().contains("enter the number of seats in each row")) {
                return CheckResult.wrong("After entering the number of rows your program should ask for entering" +
                    " the number of seats in each row.\n" +
                    "Your output should contain 'Enter the number of seats in each row'.");
            }

            output = program.execute("8").toLowerCase();

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit")) {
                return CheckResult.wrong("Your menu should contain 3 items:\n" +
                    "1. Show the seats\n" +
                    "2. Buy a ticket\n" +
                    "0. Exit");
            }

            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item you should stop your program.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkSeatingArrangement() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("7\n8");

            output = program.execute("1").toLowerCase();
            checkSeats(output, 7, 8);

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit")) {
                return CheckResult.wrong("After showing the seats arrangement you should print the menu again!");
            }

            program.stop();

            program = new TestedProgram();
            program.start();
            program.execute("2\n2");

            output = program.execute("1");
            checkSeats(output, 2, 2);

            program.stop();

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            output = program.execute("1");
            checkSeats(output, 9, 9);

            program.execute("0");
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkBuyTicket() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("7\n8");

            output = program.execute("2");

            if (!output.toLowerCase().contains("enter a row number:")) {
                return CheckResult.wrong("After choosing 'Buy a ticket' item you should ask for entering a row number.\n" +
                    "Your output should contain 'Enter a row number:'.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("enter a seat number in that row:")) {
                return CheckResult.wrong("After entering a row number you should ask for entering a seat number in that row.\n" +
                    "Your output should contain 'Enter a seat number in that row:'.");
            }

            output = program.execute("4").toLowerCase();

            if (!output.contains("ticket price")) {
                return CheckResult.wrong("After entering a row number and a seat number in that row you should print" +
                    " the ticket price.\n" +
                    "Your output should contain 'Ticket price:'.");
            }

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit")) {
                return CheckResult.wrong("After buying a ticket you should print the menu again!");
            }

            output = program.execute("1");
            checkTakenSeat(output, 7, 8, 2, 4);

            program.execute("2\n3\n5");
            output = program.execute("1");
            checkTakenSeat(output, 7, 8, 3, 5);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test4_checkTicketPrice() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            program.execute("2");
            output = program.execute("1\n1");

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }

            program.execute("2");
            output = program.execute("4\n5\n1");

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);


            program.execute("2");
            output = program.execute("5\n5\n1");

            if (!output.contains("$8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);
            checkTakenSeat(output, 9, 9, 5, 5);

            program.execute("2");
            output = program.execute("6\n6\n1");

            if (!output.contains("$8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);
            checkTakenSeat(output, 9, 9, 5, 5);
            checkTakenSeat(output, 9, 9, 6, 6);

            return CheckResult.correct();
        }


        private void checkSeats(String output, int rows, int columns) {

            if (!output.toLowerCase().contains("cinema:")) {
                throw new WrongAnswer("After entering a row number and a seat number in that row you should print" +
                    " the seating arrangement like in example!\n" +
                    "Your output should contain 'Cinema:'");
            }

            String arrangement = output.toLowerCase().split("cinema:")[1].trim();
            StringBuilder header = new StringBuilder();

            for (int i = 0; i < columns; i++) {
                header.append(i + 1);
                if (i != columns - 1) {
                    header.append(" ");
                }
            }

            if (!arrangement.startsWith(header.toString())) {
                throw new WrongAnswer("The first line of the seating arrangement should be " +
                    "'  " + header + "'");
            }

            String[] splittedOutput = arrangement.split("\n");

            for (int i = 1; i < rows + 1; i++) {

                if (i == splittedOutput.length) {
                    throw new WrongAnswer("In the seating arrangement should be " + rows + " rows!");
                }

                String errorMessage = "The ";
                if (i == 1) {
                    errorMessage += "first ";
                } else if (i == 2) {
                    errorMessage += "second  ";
                } else if (i == 3) {
                    errorMessage += "third  ";
                } else {
                    errorMessage += i + "th ";
                }

                errorMessage += "line of the seating arrangement ";

                if (!splittedOutput[i].contains("" + i)) {
                    errorMessage += "should start with \"" + i + "\"";
                    throw new WrongAnswer(errorMessage);
                }

                String line = splittedOutput[i].replace("" + i, "").trim();
                String seats = "";

                for (int j = 0; j < columns; j++) {
                    seats += "S ";
                }

                if (!line.toUpperCase().equals(seats.trim())) {
                    errorMessage += "should be \"" + i + " " + seats.trim() + "\"";
                    throw new WrongAnswer(errorMessage);
                }
            }
        }

        private void checkTakenSeat(String output, int rows, int columns, int row, int column) {

            if (!output.toLowerCase().contains("cinema:")) {
                throw new WrongAnswer("After entering a row number and a seat number in that row you should print" +
                    " the seating arrangement like in example!\n" +
                    "Your output should contain 'Cinema:'");
            }

            String arrangement = output.toLowerCase().split("cinema:")[1].trim();
            StringBuilder header = new StringBuilder();

            for (int i = 0; i < columns; i++) {
                header.append(i + 1);
                if (i != columns - 1) {
                    header.append(" ");
                }
            }

            if (!arrangement.startsWith(header.toString())) {
                throw new WrongAnswer("The first line of the seating arrangement should be " +
                    "'  " + header + "'");
            }

            String[] splittedOutput = arrangement.split("\n");

            for (int i = 1; i < rows + 1; i++) {

                if (i == splittedOutput.length) {
                    throw new WrongAnswer("In the seating arrangement should be " + rows + " rows!");
                }

                String errorMessage = "The ";
                if (i == 1) {
                    errorMessage += "first ";
                } else if (i == 2) {
                    errorMessage += "second ";
                } else if (i == 3) {
                    errorMessage += "third ";
                } else {
                    errorMessage += i + "th ";
                }

                errorMessage += "line of the seating arrangement ";

                if (!splittedOutput[i].contains("" + i)) {
                    errorMessage += "should start with \"" + i + "\"";
                    throw new WrongAnswer(errorMessage);
                }

                if (i == row) {
                    String line = splittedOutput[i];

                    if (!line.contains("b")) {
                        errorMessage += "should contain 'B' symbol.";
                        throw new WrongAnswer(errorMessage);
                    }

                    String[] splittedLine = line.trim().split(" ");

                    if (splittedLine.length != columns + 1) {
                        errorMessage += "should be printed like in examples. Expected 1 number, " + columns + " symbols and a single space between of them!";
                        throw new WrongAnswer(errorMessage);
                    }

                    if (!splittedLine[column].equals("b")) {
                        errorMessage += "should contain 'B' symbol at " + column + " column";
                        throw new WrongAnswer(errorMessage);
                    }
                }
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/133/stages/712/implement#comment
status: Solved
record: 3
